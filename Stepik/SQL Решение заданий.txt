Урок 1.1. Создание таблицы

CREATE TABLE book(
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50),
    author	VARCHAR(30),
    price	DECIMAL(8,2),
    amount INT
);

INSERT INTO book (title,author,price,amount) 
VALUES ('Мастер и Маргарита','Булгаков М.А.',670.99,3);
SELECT * FROM book;


INSERT INTO book (title,author,price,amount) 
VALUES ('Белая гвардия','Булгаков М.А.',540.50,5);
INSERT INTO book (title,author,price,amount) 
VALUES ('Идиот','Достоевский Ф.М.',460.00,10);
INSERT INTO book (title,author,price,amount) 
VALUES ('Братья Карамазовы','Достоевский Ф.М.',799.01,2);
SELECT * FROM book;




SELECT author, title, price FROM book



SELECT title AS Название, author AS Автор
FROM book;



SELECT title, amount, 
     1.65 * amount AS pack
FROM book;


SELECT title, author, amount, 
    ROUND((price*0.7),2)  AS new_price
FROM book;




SELECT author, title,
    ROUND(IF(author = 'Булгаков М.А.', price * 1.1, IF(author = 'Есенин С.А.', price * 1.05, price )), 2) AS new_price
FROM book;

SELECT  author, title, price 
FROM book
WHERE  amount < 10;

SELECT title, author, price, amount 
FROM book
WHERE (price <500 OR price>600) AND (price*amount > 5000 OR price*amount = 5000);


SELECT title, author 
FROM book
WHERE price BETWEEN 540.50 AND 800 AND amount IN (2,3,5,7);

SELECT author, title
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title ASC;

SELECT title, author FROM book 
WHERE title LIKE '_% _%' 
AND author LIKE '%С.%'
ORDER BY title;

ЗАПРОСЫ, ГРУППОВЫЕ  ОПЕРАЦИИ

SELECT  amount
FROM book
GROUP BY amount;

Query result:
+--------+
| amount |
+--------+
| 3      |
| 5      |
| 10     |
| 15     |
+--------+

SELECT author AS Автор, COUNT(author) AS Различных_книг, SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author;

+------------------+----------------+------------------------+
| Автор            | Различных_книг | Количество_экземпляров |
+------------------+----------------+------------------------+
| Булгаков М.А.    | 2              | 8                      |
| Достоевский Ф.М. | 3              | 23                     |
| Есенин С.А.      | 1              | 15                     |

+------------------+----------------+------------------------+



SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена
FROM book
GROUP BY author;

+------------------+------------------+-------------------+--------------+
| author           | Минимальная_цена | Максимальная_цена | Средняя_цена |
+------------------+------------------+-------------------+--------------+
| Булгаков М.А.    | 540.50           | 670.99            | 605.745000   |
| Достоевский Ф.М. | 460.00           | 799.01            | 579.836667   |
| Есенин С.А.      | 650.00           | 650.00            | 650.000000   |
+------------------+------------------+-------------------+--------------+





SELECT author, ROUND(SUM(price*amount),2) AS Стоимость,
ROUND ((ROUND(SUM(price*amount),2)*(18/100))/(1+(18/100)),2) AS НДС,
ROUND (ROUND(SUM(price*amount),2)/(1+(18/100)),2) AS Стоимость_без_НДС                                       
FROM book
GROUP BY author;

+------------------+-----------+---------+-------------------+
| author           | Стоимость | НДС     | Стоимость_без_НДС |
+------------------+-----------+---------+-------------------+
| Булгаков М.А.    | 4715.47   | 719.31  | 3996.16           |
| Достоевский Ф.М. | 11802.03  | 1800.31 | 10001.72          |
| Есенин С.А.      | 9750.00   | 1487.29 | 8262.71           |
+------------------+-----------+---------+-------------------+



SELECT MIN(price) AS Минимальная_цена,
       MAX(price) AS Максимальная_цена,
     ROUND(AVG(price),2) AS Средняя_цена
FROM book;

+------------------+-------------------+--------------+
| Минимальная_цена | Максимальная_цена | Средняя_цена |
+------------------+-------------------+--------------+
| 460.00           | 799.01            | 600.17       |
+------------------+-------------------+--------------+

SELECT ROUND(AVG(price),2) AS Средняя_цена, 
    ROUND(SUM(price*amount),2) AS Стоимость
FROM book  
WHERE amount BETWEEN 5 AND 14;

+--------------+-----------+
| Средняя_цена | Стоимость |
+--------------+-----------+
| 493.67       | 12107.50  |


SELECT author,
    SUM(price*amount) AS Стоимость    
FROM book
WHERE title <> 'Идиот' AND title <> 'Белая гвардия'
GROUP BY author
HAVING SUM(price*amount) > 5000
ORDER BY Стоимость DESC;

+------------------+-----------+
| author           | Стоимость |
+------------------+-----------+
| Есенин С.А.      | 9750.00   |
| Достоевский Ф.М. | 7202.03   |
+------------------+-----------+



1.4 Вложенные запросы



SELECT author,title,  price
FROM book
WHERE price <= (
         SELECT AVG(price) 
         FROM book
      )
ORDER BY price DESC;

+-------+------------------+--------+--------+
| title | author           | price  | amount |
+-------+------------------+--------+--------+
| Идиот | Достоевский Ф.М. | 460.00 | 10     |
+-------+------------------+--------+--------+

SELECT author, title, price
FROM book
WHERE (price - (SELECT MIN(price) FROM book))<=150
ORDER BY price ASC;

+------------------+----------------+--------+
| author           | title          | price  |
+------------------+----------------+--------+
| Достоевский Ф.М. | Идиот          | 460.00 |
| Достоевский Ф.М. | Игрок          | 480.50 |
| Булгаков М.А.    | Белая гвардия  | 540.50 |
| Пушкин А.С.      | Евгений Онегин | 610.00 |
+------------------+----------------+--------+

SELECT author, title,  amount
FROM book
WHERE amount IN (
        SELECT amount 
        FROM book 
        GROUP BY amount 
        HAVING COUNT(amount) = 1
      );


+---------------+-----------------------+--------+
| author        | title                 | amount |
+---------------+-----------------------+--------+
| Булгаков М.А. | Белая гвардия         | 5      |
| Есенин С.А.   | Стихотворения и поэмы | 15     |
+---------------+-----------------------+--------+

SELECT  author,title, price
FROM book
WHERE price < ANY (
        SELECT MIN(price) 
        FROM book 
        GROUP BY author 
      );


+------------------+---------------+--------+
| author           | title         | price  |
+------------------+---------------+--------+
| Булгаков М.А.    | Белая гвардия | 540.50 |
| Достоевский Ф.М. | Идиот         | 460.00 |
| Достоевский Ф.М. | Игрок         | 480.50 |
+------------------+---------------+--------+


SELECT title, author, amount, 
    ((SELECT MAX(amount) FROM book)- amount) AS Заказ
 FROM book
 WHERE ((SELECT MAX(amount) FROM book)-amount) <>0;
 
 +--------------------+------------------+--------+-------+
| title              | author           | amount | Заказ |
+--------------------+------------------+--------+-------+
| Мастер и Маргарита | Булгаков М.А.    | 3      | 12    |
| Белая гвардия      | Булгаков М.А.    | 5      | 10    |
| Идиот              | Достоевский Ф.М. | 10     | 5     |
| Братья Карамазовы  | Достоевский Ф.М. | 3      | 12    |
| Игрок              | Достоевский Ф.М. | 10     | 5     |
+--------------------+------------------+--------+-------+



SELECT author, title, price, amount
FROM book
WHERE (price - (SELECT MIN(price) FROM book))<=100
ORDER BY price DESC;
 
 +------------------+---------------+--------+--------+
| author           | title         | price  | amount |
+------------------+---------------+--------+--------+
| Булгаков М.А.    | Белая гвардия | 540.50 | 5      |
| Достоевский Ф.М. | Игрок         | 480.50 | 10     |
| Достоевский Ф.М. | Идиот         | 460.00 | 10     |
+------------------+---------------+--------+--------+
 
 
 1.5 Запросы корректировки данных
 
 CREATE TABLE supply(
    supply_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50),
    author	VARCHAR(30),
    price	DECIMAL(8,2),
    amount INT
);

INSERT INTO supply (title, author, price, amount) 
VALUES 
    ('Лирика','Пастернак Б.Л.', 518.99, 2),
    ('Черный человек', 'Есенин С.А.', 570.20, 6),
    ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
    ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
	
	
	
INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author NOT IN ('Булгаков М.А.','Достоевский Ф.М.');
SELECT * FROM book;


+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
| 6       | Лирика                | Пастернак Б.Л.   | 518.99 | 2      |
| 7       | Черный человек        | Есенин С.А.      | 570.20 | 6      |
+---------+-----------------------+------------------+--------+--------+


INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author NOT IN (
        SELECT author 
        FROM book
      );
SELECT * FROM book;


+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
| 6        | Лирика                | Пастернак Б.Л.   | 518.99 | 2      |
+---------+-----------------------+------------------+--------+--------+


UPDATE book 
SET price = 0.9 * price 
WHERE amount BETWEEN 5 AND 10;

SELECT * FROM book;

+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 486.45 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 414.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+

UPDATE book
SET buy = IF(buy>amount,amount,buy),
    price=IF(buy=0, price*0.9, price);
	SELECT * FROM book;
	
	
+---------+-----------------------+------------------+--------+--------+-----+
| book_id | title                 | author           | price  | amount | buy |
+---------+-----------------------+------------------+--------+--------+-----+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 603.89 | 3      | 0   |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      | 3   |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     | 8   |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 719.11 | 2      | 0   |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     | 15  |
+---------+-----------------------+------------------+--------+--------+-----+



UPDATE book, supply 
SET book.amount = book.amount + supply.amount,
    book.price = (book.price + supply.price) / 2
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;


+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 12     |
| 3       | Идиот                 | Достоевский Ф.М. | 410.40 | 13     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+


DELETE FROM supply 
WHERE author IN (
    SELECT author 
     FROM book
     GROUP BY author
    HAVING SUM(amount) > 10
);

SELECT * FROM supply;

+-----------+---------------+----------------+--------+--------+
| supply_id | title         | author         | price  | amount |
+-----------+---------------+----------------+--------+--------+
| 1         | Лирика        | Пастернак Б.Л. | 518.99 | 2      |
| 3         | Белая гвардия | Булгаков М.А.  | 540.50 | 7      |
+-----------+---------------+----------------+--------+--------+

CREATE TABLE ordering AS
SELECT author, title, 
   (
    SELECT ROUND(AVG(amount)) 
    FROM book
   ) AS amount
FROM book
WHERE amount < (SELECT ROUND(AVG(amount)) 
    FROM book
   );

SELECT * FROM ordering;

+------------------+--------------------+--------+
| author           | title              | amount |
+------------------+--------------------+--------+
| Булгаков М.А.    | Мастер и Маргарита | 7      |
| Булгаков М.А.    | Белая гвардия      | 7      |
| Достоевский Ф.М. | Братья Карамазовы  | 7      |
+------------------+--------------------+--------+

DELETE FROM supply 
WHERE author IN (
    SELECT author 
     FROM book
     GROUP BY author
    HAVING SUM(amount) > 12
);

SELECT * FROM supply;

+-----------+---------------+------------------+--------+--------+
| supply_id | title         | author           | price  | amount |
+-----------+---------------+------------------+--------+--------+
| 1         | Лирика        | Пастернак Б.Л.   | 518.99 | 2      |
| 3         | Белая гвардия | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот         | Достоевский Ф.М. | 360.80 | 3      |
+-----------+---------------+------------------+--------+--------+


1.6 Таблица "Командировки", запросы на выборку


SELECT name, city, per_diem, date_first, date_last 
FROM trip
WHERE name LIKE "_%а %.%."
ORDER BY date_last DESC;


+---------------+-----------------+----------+------------+------------+
| name          | city            | per_diem | date_first | date_last  |
+---------------+-----------------+----------+------------+------------+
| Абрамова К.А. | Владивосток     | 450.00   | 2020-07-02 | 2020-07-13 |
| Федорова А.Ю. | Томск           | 450.00   | 2020-06-20 | 2020-06-26 |
| Абрамова К.А. | Санкт-Петербург | 700.00   | 2020-05-28 | 2020-06-04 |
| Федорова А.Ю. | Новосибирск     | 450.00   | 2020-05-25 | 2020-06-04 |
| Абрамова К.А. | Москва          | 700.00   | 2020-04-06 | 2020-04-14 |
| Абрамова К.А. | Москва          | 700.00   | 2020-02-23 | 2020-03-01 |
| Абрамова К.А. | Владивосток     | 450.00   | 2020-01-14 | 2020-01-27 |
+---------------+-----------------+----------+------------+------------+


SELECT name
FROM trip
WHERE city IN ('Москва')
GROUP BY name
ORDER BY name;

+---------------+
| name          |
+---------------+
| Абрамова К.А. |
| Баранов П.Е.  |
| Колесов С.П.  |
| Лебедев Т.К.  |
| Семенов И.В.  |
+---------------+

SELECT city, COUNT(city) AS Количество
FROM trip
GROUP BY city
ORDER BY city;

+-----------------+------------+
| city            | Количество |
+-----------------+------------+
| Владивосток     | 3          |
| Воронеж         | 1          |
| Москва          | 7          |
| Новосибирск     | 4          |
| Санкт-Петербург | 3          |
| Томск           | 2          |
+-----------------+------------+


SELECT city, COUNT(city) AS Количество
FROM trip
GROUP BY city
ORDER BY COUNT(city) DESC
LIMIT 2;

+-------------+------------+
| city        | Количество |
+-------------+------------+
| Москва      | 7          |
| Новосибирск | 4          |
+-------------+------------+


SELECT name, city, ROUND(DATEDIFF(date_last,date_first)+1) AS Длительность
FROM trip
WHERE city NOT IN ('Москва', 'Санкт-Петербург')
ORDER BY 3 DESC, 1 DESC;

+---------------+-------------+--------------+
| name          | city        | Длительность |
+---------------+-------------+--------------+
| Ильиных Г.Р.  | Владивосток | 22           |
| Баранов П.Е.  | Новосибирск | 17           |
| Колесов С.П.  | Новосибирск | 15           |
| Абрамова К.А. | Владивосток | 14           |
| Лебедев Т.К.  | Томск       | 12           |
| Абрамова К.А. | Владивосток | 12           |
| Федорова А.Ю. | Новосибирск | 11           |
| Колесов С.П.  | Новосибирск | 10           |
| Федорова А.Ю. | Томск       | 7            |
| Баранов П.Е.  | Воронеж     | 7            |
+---------------+-------------+--------------+


SELECT name, city, date_first, date_last
FROM trip
WHERE DATEDIFF (date_last,date_first)  = (SELECT MIN(DATEDIFF(date_last,date_first)) FROM trip);

+--------------+-----------------+------------+------------+
| name         | city            | date_first | date_last  |
+--------------+-----------------+------------+------------+
| Семенов И.В. | Санкт-Петербург | 2020-06-01 | 2020-06-03 |
+--------------+-----------------+------------+------------+


SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first) = MONTH(date_last)
ORDER BY city, name;

+---------------+-----------------+------------+------------+
| name          | city            | date_first | date_last  |
+---------------+-----------------+------------+------------+
| Абрамова К.А. | Владивосток     | 2020-01-14 | 2020-01-27 |
| Абрамова К.А. | Владивосток     | 2020-07-02 | 2020-07-13 |
| Баранов П.Е.  | Воронеж         | 2020-07-19 | 2020-07-25 |
| Абрамова К.А. | Москва          | 2020-04-06 | 2020-04-14 |
| Баранов П.Е.  | Москва          | 2020-01-12 | 2020-01-17 |
| Баранов П.Е.  | Москва          | 2020-02-14 | 2020-02-22 |
| Колесов С.П.  | Москва          | 2020-02-01 | 2020-02-06 |
| Лебедев Т.К.  | Москва          | 2020-03-03 | 2020-03-06 |
| Семенов И.В.  | Москва          | 2020-01-23 | 2020-01-31 |
| Колесов С.П.  | Новосибирск     | 2020-06-03 | 2020-06-12 |
| Семенов И.В.  | Санкт-Петербург | 2020-06-01 | 2020-06-03 |
| Лебедев Т.К.  | Томск           | 2020-05-20 | 2020-05-31 |
| Федорова А.Ю. | Томск           | 2020-06-20 | 2020-06-26 |
+---------------+-----------------+------------+------------+

SELECT MONTHNAME(date_first) AS Месяц, COUNT(DATEDIFF(date_last, date_first)) AS Количество
FROM trip
GROUP BY MONTHNAME(date_first)
ORDER BY 2 DESC, 1;



+----------+------------+
| Месяц    | Количество |
+----------+------------+
| February | 4          |
| January  | 4          |
| June     | 3          |
| May      | 3          |
| April    | 2          |
| July     | 2          |
| March    | 2          |
+----------+------------+

SELECT name, city, date_first, (DATEDIFF(date_last,date_first)+1) * per_diem AS Сумма 
FROM trip
WHERE MONTH(date_first) = 2 OR MONTH(date_first) = 3
ORDER BY 1, 4 DESC;


+---------------+-----------------+------------+---------+
| name          | city            | date_first | Сумма   |
+---------------+-----------------+------------+---------+
| Абрамова К.А. | Москва          | 2020-02-23 | 5600.00 |
| Баранов П.Е.  | Москва          | 2020-02-14 | 6300.00 |
| Колесов С.П.  | Новосибирск     | 2020-02-27 | 6750.00 |
| Колесов С.П.  | Москва          | 2020-02-01 | 4200.00 |
| Лебедев Т.К.  | Москва          | 2020-03-03 | 2800.00 |
| Семенов И.В.  | Санкт-Петербург | 2020-03-29 | 5600.00 |
+---------------+-----------------+------------+---------+


SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS Сумма
FROM trip
GROUP BY name
HAVING COUNT(name)>3
ORDER BY 2 DESC;

+---------------+----------+
| name          | Сумма    |
+---------------+----------+
| Абрамова К.А. | 29200.00 |
| Баранов П.Е.  | 21300.00 |
+---------------+----------+

1.7 Таблица "Нарушения ПДД", запросы корректировки


CREATE TABLE fine(
fine_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR (30),
    number_plate VARCHAR (6),
    violation VARCHAR (50),
    sum_fine DECIMAL (8,2),
    date_violation DATE,
    date_payment DATE
    );
	
	
	
	INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES
     ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
     ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
     ('Яковлев Г.Р.','Т330ТТ', 'Проезд на запрещающий сигнал', NULL,  '2020-03-03', NULL);



UPDATE fine f, traffic_violation tv
SET f.sum_fine = tv.sum_fine
WHERE f.sum_fine IS NULL AND f.violation = tv.violation;

+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-12     | NULL         |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | NULL         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 1000.00  | 2020-02-14     | NULL         |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-02-23     | NULL         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-03-03     | NULL         |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+

SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING COUNT(number_plate) >=2
ORDER BY name, number_plate, violation;


+---------------+--------------+----------------------------------+
| name          | number_plate | violation                        |
+---------------+--------------+----------------------------------+
| Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     |
| Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) |
+---------------+--------------+----------------------------------+


UPDATE fine 
SET sum_fine = sum_fine * 2
WHERE ((name = 'Абрамова К.А.' AND number_plate = 'О111АВ') OR (name = 'Баранов П.Е.' AND number_plate = 'Р523ВТ')) AND date_payment IS NULL;

SELECT * FROM fine;


+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-12     | NULL         |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | NULL         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | NULL         |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | NULL         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-03-03     | NULL         |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+




UPDATE fine f, payment p
SET 
f.date_payment = p.date_payment,
f.sum_fine = IF((f.date_payment-f.date_violation)<=20,f.sum_fine/2, f.sum_fine)
 WHERE f.name = p.name AND f.number_plate = p.number_plate  AND f.violation = p.violation AND f.date_payment IS NULL ;


SELECT * FROM fine;


+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 250.00   | 2020-01-12     | 2020-01-22   |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | NULL         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | 2020-03-06   |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | NULL         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 500.00   | 2020-03-03     | 2020-03-23   |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+


CREATE TABLE back_payment AS
SELECT name, number_plate, violation, sum_fine, date_violation
FROM fine
WHERE date_payment IS NULL;

SELECT * FROM back_payment;


+---------------+--------------+----------------------------------+----------+----------------+
| name          | number_plate | violation                        | sum_fine | date_violation |
+---------------+--------------+----------------------------------+----------+----------------+
| Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     |
| Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     |
+---------------+--------------+----------------------------------+----------+----------------



DELETE FROM fine 
WHERE YEAR(date_violation) <= 2020 AND MONTH(date_violation) <2;

SELECT * FROM fine;


+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | NULL         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | 2020-03-05   |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | NULL         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 500.00   | 2020-03-03     | 2020-03-22   |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+




2.1 Связи между таблицами



CREATE TABLE author (
author_id INT PRIMARY KEY AUTO_INCREMENT,
name_author VARCHAR(50)
);

INSERT INTO author (name_author)
VALUES ('Булгаков М.А.'),
       ('Достоевский Ф.М.'),
        ('Есенин С.А.'),
        ('Пастернак Б.Л.');
        
SELECT * FROM author;

+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
+-----------+------------------+



CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL, 
    genre_id INT,
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id), 
    FOREIGN KEY (genre_id)  REFERENCES genre (genre_id) 
);


CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL, 
    genre_id INT NULL,
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE, 
    FOREIGN KEY (genre_id)  REFERENCES genre (genre_id) ON DELETE SET NULL
);



INSERT INTO book (title, author_id, genre_id, price, amount)
   VALUES ('Стихотворения и поэмы', 3, 2, 650.00, 15),
          ('Черный человек', 3, 2, 570.20, 6),
           ('Лирика', 4, 2, 518.99, 2);

SELECT * FROM book;


+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+

2.2 Запросы на выборку, соединение таблиц


SELECT title, name_genre, price
FROM 
    genre INNER JOIN book
    ON genre.genre_id = book.genre_id
WHERE amount >8
ORDER BY price DESC;


+-----------------------+------------+--------+
| title                 | name_genre | price  |
+-----------------------+------------+--------+
| Стихотворения и поэмы | Поэзия     | 650.00 |
| Игрок                 | Роман      | 480.50 |
| Идиот                 | Роман      | 460.00 |
+-----------------------+------------+--------+

SELECT name_genre
FROM genre LEFT JOIN book
     ON genre.genre_id = book.genre_id 
     WHERE book.genre_id IS Null;
	 
	 
+-------------+
| name_genre  |
+-------------+
| Приключения |
+-------------+


SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL (FLOOR(RAND(1) * 365)) DAY) AS Дата
FROM 
    city, author
ORDER BY 1, 3 DESC;


+-----------------+------------------+------------+
| name_city       | name_author      | Дата       |
+-----------------+------------------+------------+
| Владивосток     | Лермонтов М.Ю.   | 2020-10-23 |
| Владивосток     | Есенин С.А.      | 2020-08-10 |
| Владивосток     | Булгаков М.А.    | 2020-05-27 |
| Владивосток     | Пастернак Б.Л.   | 2020-04-25 |
| Владивосток     | Достоевский Ф.М. | 2020-02-04 |
| Москва          | Достоевский Ф.М. | 2020-12-12 |
| Москва          | Лермонтов М.Ю.   | 2020-03-15 |
| Москва          | Есенин С.А.      | 2020-03-08 |
| Москва          | Пастернак Б.Л.   | 2020-03-05 |
| Москва          | Булгаков М.А.    | 2020-02-21 |
| Санкт-Петербург | Булгаков М.А.    | 2020-11-14 |
| Санкт-Петербург | Лермонтов М.Ю.   | 2020-07-11 |
| Санкт-Петербург | Есенин С.А.      | 2020-03-15 |
| Санкт-Петербург | Достоевский Ф.М. | 2020-01-18 |
| Санкт-Петербург | Пастернак Б.Л.   | 2020-01-10 |
+-----------------+------------------+------------+

SELECT name_genre, title, name_author
FROM
    genre 
    INNER JOIN  book ON genre.genre_id = book.genre_id
    INNER JOIN author ON author.author_id = book.author_id
WHERE name_genre IN('Роман')
ORDER BY 2;


+------------+--------------------+------------------+
| name_genre | title              | name_author      |
+------------+--------------------+------------------+
| Роман      | Белая гвардия      | Булгаков М.А.    |
| Роман      | Братья Карамазовы  | Достоевский Ф.М. |
| Роман      | Игрок              | Достоевский Ф.М. |
| Роман      | Идиот              | Достоевский Ф.М. |
| Роман      | Мастер и Маргарита | Булгаков М.А.    |
+------------+--------------------+------------------+


SELECT name_author, SUM(amount) AS Количество
FROM 
    author LEFT JOIN book
    on author.author_id = book.author_id
GROUP BY name_author

HAVING SUM(amount)<10 OR SUM(amount) IS NULL
ORDER BY SUM(amount); 


+----------------+------------+
| name_author    | Количество |
+----------------+------------+
| Лермонтов М.Ю. | NULL       |
| Пастернак Б.Л. | 2          |
| Булгаков М.А.  | 8          |
+----------------+------------+

SELECT name_author
FROM  author INNER JOIN book
    on author.author_id = book.author_id
WHERE book.author_id IN(
        
            SELECT author_id
             
            FROM book GROUP BY author_id
              HAVING MAX(genre_id) = MIN(genre_id ))
GROUP BY book.author_id 
ORDER BY book.author_id ASC;

+------------------+
| name_author      |
+------------------+
| Достоевский Ф.М. |
| Пастернак Б.Л.   |
+------------------+

SELECT  title, name_author, name_genre, price, amount
FROM 
author
  INNER JOIN book 
  ON author.author_id = book.author_id
    INNER JOIN genre
    ON  book.genre_id = genre.genre_id
WHERE genre.genre_id IN
        
          (SELECT query_in_1.genre_id
          FROM 
             (
                SELECT genre_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY genre_id
               ) query_in_1
          INNER JOIN 
          (
                SELECT genre_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY genre_id
                ORDER BY sum_amount DESC
                LIMIT 1
               ) query_in_2
          ON query_in_1.sum_amount= query_in_2.sum_amount
         )
        ORDER BY title;   


+-----------------------+------------------+------------+--------+--------+
| title                 | name_author      | name_genre | price  | amount |
+-----------------------+------------------+------------+--------+--------+
| Белая гвардия         | Булгаков М.А.    | Роман      | 540.50 | 5      |
| Братья Карамазовы     | Достоевский Ф.М. | Роман      | 799.01 | 3      |
| Игрок                 | Достоевский Ф.М. | Роман      | 480.50 | 10     |
| Идиот                 | Достоевский Ф.М. | Роман      | 460.00 | 10     |
| Лирика                | Пастернак Б.Л.   | Поэзия     | 518.99 | 10     |
| Мастер и Маргарита    | Булгаков М.А.    | Роман      | 670.99 | 3      |
| Стихотворения и поэмы | Есенин С.А.      | Поэзия     | 650.00 | 15     |
| Черный человек        | Есенин С.А.      | Поэзия     | 570.20 | 6      |
+-----------------------+------------------+------------+--------+--------+

SELECT book.title AS Название, author.name_author AS Автор, 
IF (supply.price = book.price and author.name_author = supply.author, supply.amount + book.amount, book.amount) AS Количество
FROM 
    author 
    INNER JOIN book USING (author_id)   
    INNER JOIN supply ON book.title = supply.title 
                         and author.name_author = supply.author
 WHERE supply.price = book.price;


SELECT book.title AS Название, author.name_author AS Автор,  (supply.amount + book.amount) AS Количество
FROM 
    author 
    INNER JOIN book USING (author_id)   
    INNER JOIN supply ON book.title = supply.title 
                         and author.name_author = supply.author
 WHERE supply.price = book.price;
 

+----------------+-------------+------------+
| Название       | Автор       | Количество |
+----------------+-------------+------------+
| Черный человек | Есенин С.А. | 12         |
+----------------+-------------+------------+






2.3 Запросы корректировки, соединение таблиц


Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),
 необходимо в таблице book увеличить количество на значение, 
указанное в поставке,  и пересчитать цену. А в таблице  supply обнулить количество этих книг. 
Формула для пересчета цены:


 
где  p1, p2 - цена книги в таблицах book и supply;

       k1, k2 - количество книг в таблицах book и supply.


SELECT title AS Название, name_author AS Автор, name_genre AS Жанр, amount AS Количество, price AS Стоимость
FROM 
author 
    INNER JOIN book USING (author_id)   
    INNER JOIN genre ON genre.genre_id = book.genre_id
                         
 WHERE genre.name_genre IN('Приключения');
 
 
 
 UPDATE book 
     INNER JOIN author ON author.author_id = book.author_id
     INNER JOIN supply ON book.title = supply.title 
                         and supply.author = author.name_author
SET book.amount = book.amount + supply.amount,
    supply.amount = 0,
    book.price=(book.price*book.amount + supply.price*supply.amount)/(book.amount+supply.amount)
WHERE book.price <> supply.price;

SELECT * FROM book;

SELECT * FROM supply;



+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+

+-----------+-----------------------+------------------+--------+--------+
| supply_id | title                 | author           | price  | amount |
+-----------+-----------------------+------------------+--------+--------+
| 1         | Доктор Живаго         | Пастернак Б.Л.   | 380.80 | 4      |
| 2         | Черный человек        | Есенин С.А.      | 570.20 | 6      |
| 3         | Белая гвардия         | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот                 | Достоевский Ф.М. | 360.80 | 0      |
| 5         | Стихотворения и поэмы | Лермонтов М.Ю.   | 255.90 | 4      |
| 6         | Остров сокровищ       | Стивенсон Р.Л.   | 599.99 | 5      |
+-----------+-----------------------+------------------+--------+--------+


Включить новых авторов в таблицу author с помощью запроса на добавление, 
а затем вывести все данные из таблицы author. 
 Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.



INSERT INTO author (name_author)
SELECT supply.author
FROM 
    supply
    LEFT JOIN  author on supply.author = author.name_author
WHERE name_author IS Null;

SELECT * FROM author;

+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
| 5         | Лермонтов М.Ю.   |
| 6         | Стивенсон Р.Л.   |
+-----------+------------------+

Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. 
Затем вывести для просмотра таблицу book.

INSERT INTO book (title, author_id, price, amount)
SELECT title, author_id, price, amount
FROM 
    author 
    INNER JOIN supply ON author.name_author = supply.author
WHERE amount <> 0;

SELECT * FROM book;


+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | NULL     | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | NULL     | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+

 Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», 
 а для книги «Остров сокровищ» Стивенсона - «Приключения». (Использовать два запроса).

UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Поэзия'
      )
WHERE book_id = 10;

SELECT * FROM book;


+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+



UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Приключения'
      )
WHERE book_id = 11;

SELECT * FROM book;


+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+


Удалить всех авторов и все их книги, общее количество книг которых меньше 20.

DELETE FROM author
WHERE author_id IN(SELECT author_id 
     FROM book
     GROUP BY author_id
    HAVING SUM(amount) < 20);

SELECT * FROM author;

SELECT * FROM book;


+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
+-----------+------------------+

+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
+---------+-----------------------+-----------+----------+--------+--------+


Удалить все жанры, к которым относится меньше 4-х наименований книг. 
В таблице book для этих жанров установить значение Null.

DELETE FROM genre
WHERE genre_id IN(SELECT genre_id 
                    FROM book
                    GROUP BY genre_id
                    HAVING SUM(genre_id) <4);

SELECT * FROM genre;

SELECT * FROM book;

+----------+------------+
| genre_id | name_genre |
+----------+------------+
| 1        | Роман      |
| 2        | Поэзия     |
+----------+------------+

+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+



Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. 
В запросе для отбора авторов использовать полное название жанра, а не его id.


DELETE FROM author
USING 
    author 
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON genre.genre_id = book.genre_id
WHERE name_genre IN('Поэзия');

SELECT * FROM author;

SELECT * FROM book;

+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 6         | Стивенсон Р.Л.   |
+-----------+------------------+

+---------+--------------------+-----------+----------+--------+--------+
| book_id | title              | author_id | genre_id | price  | amount |
+---------+--------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия      | 1         | 1        | 540.50 | 12     |
| 3       | Идиот              | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы  | 2         | 1        | 799.01 | 3      |
| 5       | Игрок              | 2         | 1        | 480.50 | 10     |
| 11      | Остров сокровищ    | 6         | 3        | 599.99 | 5      |
+---------+--------------------+-----------+----------+--------+--------+


2.4 База данных «Интернет-магазин книг», запросы на выборку


Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) 
в отсортированном по номеру заказа и названиям книг виде.

SELECT buy.buy_id, title, price, buy_book.amount
FROM 
    client 
    INNER JOIN buy ON client.client_id = buy.client_id
    INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
    INNER JOIN book ON buy_book.book_id=book.book_id
WHERE name_client IN('Баранов Павел')
ORDER BY 1,2;   


+--------+--------------------+--------+--------+
| buy_id | title              | price  | amount |
+--------+--------------------+--------+--------+
| 1      | Идиот              | 460.00 | 1      |
| 1      | Мастер и Маргарита | 670.99 | 1      |
| 1      | Черный человек     | 570.20 | 2      |
| 4      | Игрок              | 480.50 | 1      |
+--------+--------------------+--------+--------+


Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора 
(нужно посчитать, в каком количестве заказов фигурирует каждая книга).  
Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. 
Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.


SELECT name_author, title, COUNT(buy_book.amount) AS Количество
FROM  book
LEFT JOIN author
  ON  book.author_id = author.author_id 
    LEFT JOIN buy_book
    ON  book.book_id = buy_book.book_id
GROUP BY name_author, title, buy_book.book_id
ORDER BY 1, 2;

+------------------+-----------------------+------------+
| name_author      | title                 | Количество |
+------------------+-----------------------+------------+
| Булгаков М.А.    | Белая гвардия         | 1          |
| Булгаков М.А.    | Мастер и Маргарита    | 2          |
| Достоевский Ф.М. | Братья Карамазовы     | 0          |
| Достоевский Ф.М. | Игрок                 | 1          |
| Достоевский Ф.М. | Идиот                 | 2          |
| Есенин С.А.      | Стихотворения и поэмы | 0          |
| Есенин С.А.      | Черный человек        | 1          |
| Пастернак Б.Л.   | Лирика                | 1          |
+------------------+-----------------------+------------+

Вывести города, в которых живут клиенты, 
оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, 
а затем в алфавитном порядке по названию городов.

SELECT DISTINCT name_city, COUNT(buy.client_id) AS Количество
FROM client
INNER JOIN city ON client.city_id = city.city_id
    INNER JOIN buy ON client.client_id = buy.client_id
GROUP BY name_city, name_client 
ORDER BY 2 DESC, 1 ASC; 


+-----------------+------------+
| name_city       | Количество |
+-----------------+------------+
| Владивосток     | 2          |
| Москва          | 1          |
| Санкт-Петербург | 1          |
+-----------------+------------+


Вывести номера всех оплаченных заказов и даты, когда они были оплачены.

SELECT buy_step.buy_id, date_step_end
FROM buy_step
INNER JOIN step ON buy_step.step_id = step.step_id
WHERE buy_step.step_id = 1 AND date_step_end IS NOT Null
ORDER BY buy_step.buy_id;

+--------+---------------+
| buy_id | date_step_end |
+--------+---------------+
| 1      | 2020-02-20    |
| 2      | 2020-02-28    |
| 3      | 2020-03-05    |
+--------+---------------+

Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.


SELECT buy_book.buy_id, name_client, SUM(book.price * buy_book.amount) AS Стоимость
FROM book
INNER JOIN buy_book USING (book_id)
INNER JOIN buy  USING (buy_id)
INNER JOIN client 
        USING (client_id) 
GROUP BY buy_book.buy_id
ORDER BY buy_book.buy_id;

+--------+----------------+-----------+
| buy_id | name_client    | Стоимость |
+--------+----------------+-----------+
| 1      | Баранов Павел  | 2271.39   |
| 2      | Семенонов Иван | 1037.98   |
| 3      | Абрамова Катя  | 2131.49   |
| 4      | Баранов Павел  | 480.50    |
+--------+----------------+-----------+


Вывести номера заказов (buy_id) и названия этапов,  на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.

SELECT buy_step.buy_id, name_step
FROM step
INNER JOIN buy_step ON step.step_id = buy_step.step_id
WHERE date_step_end IS Null AND date_step_beg IS NOT Null
ORDER BY buy_step.buy_id;


+--------+-----------------+
| buy_id | name_step       |
+--------+-----------------+
| 2      | Транспортировка |
| 3      | Доставка        |
| 4      | Оплата          |
+--------+-----------------+


В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.


SELECT 
    buy_step.buy_id, 
    DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) AS Количество_дней, 
    IF(DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) - city.days_delivery > 0, 
        DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) - city.days_delivery, 
        0) AS Опоздание
FROM 
    buy_step 
    INNER JOIN step ON buy_step.step_id = step.step_id
    INNER JOIN buy ON buy_step.buy_id = buy.buy_id 
    INNER JOIN client ON buy.client_id = client.client_id
    INNER JOIN city ON client.city_id = city.city_id                                                          
WHERE 
    buy_step.date_step_end IS NOT NULL 
    AND buy_step.step_id = 3
ORDER BY 
    buy_step.buy_id;
	
	
	
+--------+-----------------+-----------+
| buy_id | Количество_дней | Опоздание |
+--------+-----------------+-----------+
| 1      | 14              | 2         |
| 3      | 4               | 0         |
+--------+-----------------+-----------+

Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.

SELECT name_client
FROM book
INNER JOIN buy_book ON book.book_id = buy_book.book_id
INNER JOIN buy ON buy_book.buy_id = buy.buy_id
INNER JOIN author ON book.author_id = author.author_id
INNER JOIN client ON buy.client_id = client.client_id
WHERE name_author IN('Достоевский Ф.М.')
GROUP BY name_client
ORDER BY name_client;

+---------------+
| name_client   |
+---------------+
| Абрамова Катя |
| Баранов Павел |
+---------------+

Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.


SELECT name_genre, SUM(buy_book.amount) AS Количество
FROM book
INNER JOIN buy_book ON book.book_id = buy_book.book_id
INNER JOIN genre ON book.genre_id = genre.genre_id
WHERE genre.genre_id IN
        
          (SELECT query_in_1.genre_id
          FROM 
             (
                SELECT book.genre_id, SUM(buy_book.amount)  AS sum_amount
                FROM book
                 INNER JOIN buy_book ON book.book_id = buy_book.book_id
                GROUP BY book.genre_id
               ) query_in_1
          INNER JOIN 
          (
                SELECT book.genre_id, SUM(buy_book.amount)  AS sum_amount
                FROM book
                 INNER JOIN buy_book ON book.book_id = buy_book.book_id
                GROUP BY book.genre_id
                ORDER BY sum_amount DESC
                LIMIT 1
               ) query_in_2
          ON query_in_1.sum_amount= query_in_2.sum_amount
         )
         GROUP BY name_genre;

+------------+------------+
| name_genre | Количество |
+------------+------------+
| Роман      | 7          |
+------------+------------+

Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.

SELECT YEAR(date_payment) AS Год, MONTHNAME(date_payment) AS Месяц, SUM(price*amount) AS Сумма
FROM buy_archive
WHERE  date_payment IS NOT Null
GROUP BY 1,2

UNION 
SELECT YEAR(date_step_end) AS Год, MONTHNAME(date_step_end) AS Месяц, SUM(price*buy_book.amount) AS Сумма
FROM book
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id) 
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)                  
WHERE  date_step_end IS NOT Null AND name_step = 'Оплата'
GROUP BY 1,2
ORDER BY 2,1;

+------+----------+---------+
| Год  | Месяц    | Сумма   |
+------+----------+---------+
| 2019 | February | 5626.30 |
| 2020 | February | 3309.37 |
| 2019 | March    | 6857.50 |
| 2020 | March    | 2131.49 |
+------+----------+---------+

Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за 2020 и 2019 год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.


SELECT title, SUM(Menge) AS Количество, SUM(Summe) AS Сумма
FROM (
      SELECT title, SUM(buy_archive.amount) AS Menge, SUM(buy_archive.price*buy_archive.amount) AS Summe
      FROM
          buy_archive
          INNER JOIN book ON buy_archive.book_id = book.book_id
      WHERE  date_payment IS NOT Null
      GROUP BY 1

      UNION ALL
      SELECT title, SUM(buy_book.amount) AS Menge, SUM(book.price*buy_book.amount) AS Summe
      FROM 
          book
          INNER JOIN buy_book ON book.book_id = buy_book.book_id
          INNER JOIN buy_step ON buy_book.buy_id = buy_step.buy_id
          INNER JOIN step ON buy_step.step_id = step.step_id
      WHERE  date_step_end IS NOT Null AND name_step = 'Оплата'
      GROUP BY 1) query_in
GROUP BY 1

ORDER BY 3 DESC;


+-----------------------+------------+---------+
| title                 | Количество | Сумма   |
+-----------------------+------------+---------+
| Братья Карамазовы     | 8          | 6247.20 |
| Мастер и Маргарита    | 6          | 4024.38 |
| Идиот                 | 5          | 2281.80 |
| Белая гвардия         | 3          | 1581.10 |
| Черный человек        | 2          | 1140.40 |
| Лирика                | 2          | 1037.98 |
| Игрок                 | 2          | 961.80  |
| Стихотворения и поэмы | 1          | 650.00  |
+-----------------------+------------+---------+



2.5 База данных «Интернет-магазин книг», запросы корректировки


Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.

INSERT INTO client (name_client, city_id, email)
SELECT 'Попов Илья', city_id, 'popov@test' 
FROM city
WHERE city_id = 1;
SELECT * FROM client;

+-----------+-----------------+---------+----------------+
| client_id | name_client     | city_id | email          |
+-----------+-----------------+---------+----------------+
| 1         | Баранов Павел   | 3       | baranov@test   |
| 2         | Абрамова Катя   | 1       | abramova@test  |
| 3         | Семенонов Иван  | 2       | semenov@test   |
| 4         | Яковлева Галина | 1       | yakovleva@test |
| 5         | Попов Илья      | 1       | popov@test     |
+-----------+-----------------+---------+----------------+

Создать новый заказ для Попова Ильи. Его комментарий для заказа: «Связаться со мной по вопросу доставки».

INSERT INTO buy (buy_description, client_id)
SELECT 'Связаться со мной по вопросу доставки', client_id 
FROM client
WHERE name_client = 'Попов Илья';
SELECT * FROM buy;

+--------+---------------------------------------+-----------+
| buy_id | buy_description                       | client_id |
+--------+---------------------------------------+-----------+
| 1      | Доставка только вечером               | 1         |
| 2      | NULL                                  | 3         |
| 3      | Упаковать каждую книгу по отдельности | 2         |
| 4      | NULL                                  | 1         |
| 5      | Связаться со мной по вопросу доставки | 5         |
+--------+---------------------------------------+-----------+

В таблицу buy_book добавить заказ с номером 5. Этот заказ должен содержать книгу Пастернака «Лирика» в количестве двух экземпляров и книгу Булгакова «Белая гвардия» в одном экземпляре.

INSERT INTO buy_book (buy_id, book_id, amount)
SELECT 5, 8, 2
FROM book
INNER JOIN author USING (author_id)
WHERE name_author = 'Пастернак Б.Л.' AND title = 'Лирика';


INSERT INTO buy_book (buy_id, book_id, amount)
SELECT 5, 2, 1
FROM book
INNER JOIN author USING (author_id)
WHERE name_author = 'Булгаков М.А.' AND title = 'Белая гвардия';
SELECT * FROM buy_book;

+-------------+--------+---------+--------+
| buy_book_id | buy_id | book_id | amount |
+-------------+--------+---------+--------+
| 1           | 1      | 1       | 1      |
| 2           | 1      | 7       | 2      |
| 3           | 1      | 3       | 1      |
| 4           | 2      | 8       | 2      |
| 5           | 3      | 3       | 2      |
| 6           | 3      | 2       | 1      |
| 7           | 3      | 1       | 1      |
| 8           | 4      | 5       | 1      |
| 9           | 5      | 8       | 2      |
| 10          | 5      | 2       | 1      |
+-------------+--------+---------+--------+

UPDATE book, buy_book
SET book.amount = book.amount - buy_book.amount
WHERE buy_book.buy_id = 5;
SELECT * FROM book;

Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество, которое в заказе с номером 5  указано.

UPDATE book
INNER JOIN buy_book ON book.book_id = buy_book.book_id AND buy_book.buy_id = 5
SET book.amount = book.amount - buy_book.amount;
SELECT * FROM book;

+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 4      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 0      |
+---------+-----------------------+-----------+----------+--------+--------+


Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора, цену, количество заказанных книг и  стоимость. Последний столбец назвать Стоимость. Информацию в таблицу занести в отсортированном по названиям книг виде.


CREATE TABLE buy_pay AS
SELECT title, name_author, price, buy_book.amount,  buy_book.amount*price AS Стоимость
FROM book
INNER JOIN buy_book USING (book_id)
INNER JOIN author USING (author_id)
WHERE buy_book.buy_id = 5
ORDER BY title;

SELECT * FROM buy_pay;

+---------------+----------------+--------+--------+-----------+
| title         | name_author    | price  | amount | Стоимость |
+---------------+----------------+--------+--------+-----------+
| Белая гвардия | Булгаков М.А.  | 540.50 | 1      | 540.50    |
| Лирика        | Пастернак Б.Л. | 518.99 | 2      | 1037.98   |
+---------------+----------------+--------+--------+-----------+


Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5. Куда включить номер заказа, количество книг в заказе (название столбца Количество) и его общую стоимость (название столбца Итого). Для решения используйте ОДИН запрос.




CREATE TABLE buy_pay
SELECT buy_id, SUM(buy_book.amount) AS Количество, SUM(buy_book.amount*price) AS Итого
FROM buy_book
INNER JOIN book USING(book_id)
WHERE buy_id = 5;

SELECT * FROM buy_pay;

+--------+------------+---------+
| buy_id | Количество | Итого   |
+--------+------------+---------+
| 5      | 3          | 1578.48 |
+--------+------------+---------+


В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step, которые должен пройти этот заказ. В столбцы date_step_beg и date_step_end всех записей занести Null.

INSERT INTO buy_step (buy_step.buy_id, buy_step.step_id, buy_step.date_step_beg, buy_step.date_step_end)
SELECT 5, buy_step.step_id, NULL, NULL
FROM buy_step CROSS JOIN step
GROUP BY 2;

SELECT * FROM buy_step;

+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 1           | 1      | 1       | 2020-02-20    | 2020-02-20    |
| 2           | 1      | 2       | 2020-02-20    | 2020-02-21    |
| 3           | 1      | 3       | 2020-02-22    | 2020-03-07    |
| 4           | 1      | 4       | 2020-03-06    | 2020-03-06    |
| 5           | 2      | 1       | 2020-02-28    | 2020-02-28    |
| 6           | 2      | 2       | 2020-02-29    | 2020-03-01    |
| 7           | 2      | 3       | 2020-03-02    | NULL          |
| 8           | 2      | 4       | NULL          | NULL          |
| 9           | 3      | 1       | 2020-03-05    | 2020-03-05    |
| 10          | 3      | 2       | 2020-03-05    | 2020-03-06    |
| 11          | 3      | 3       | 2020-03-06    | 2020-03-10    |
| 12          | 3      | 4       | 2020-03-11    | NULL          |
| 13          | 4      | 1       | 2020-03-20    | NULL          |
| 14          | 4      | 2       | NULL          | NULL          |
| 15          | 4      | 3       | NULL          | NULL          |
| 16          | 4      | 4       | NULL          | NULL          |
| 17          | 5      | 1       | NULL          | NULL          |
| 18          | 5      | 2       | NULL          | NULL          |
| 19          | 5      | 3       | NULL          | NULL          |
| 20          | 5      | 4       | NULL          | NULL          |
+-------------+--------+---------+---------------+---------------+

В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.


UPDATE buy_step
INNER JOIN step ON buy_step.step_id = step.step_id AND buy_step.step_id = 1 AND buy_id = 5
SET date_step_beg = '2020-04-12';

SELECT buy_step_id, buy_id, step_id, date_step_beg, date_step_end 
FROM buy_step
WHERE buy_id = 5;

+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 17          | 5      | 1       | 2020-04-12    | NULL          |
| 18          | 5      | 2       | NULL          | NULL          |
| 19          | 5      | 3       | NULL          | NULL          |
| 20          | 5      | 4       | NULL          | NULL          |
+-------------+--------+---------+---------------+---------------+


Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020, и начать следующий этап («Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.

Реализовать два запроса для завершения этапа и начала следующего. Они должны быть записаны в общем виде, чтобы его можно было применять для любых этапов, изменив только текущий этап. Для примера пусть это будет этап «Оплата».

UPDATE buy_step
INNER JOIN step ON buy_step.step_id = step.step_id AND buy_step.step_id = 1 AND buy_step.buy_id = 5
SET  date_step_end = '2020-04-13';

UPDATE buy_step
INNER JOIN step ON buy_step.step_id = step.step_id AND buy_step.step_id = (SELECT step_id + 1  
FROM step
WHERE name_step = 'Оплата') AND buy_step.buy_id = 5
SET  buy_step.date_step_beg = '2020-04-13';

SELECT buy_step_id, buy_id, step_id, date_step_beg, date_step_end 
FROM buy_step
WHERE buy_id = 5;

Поздравляем, Вы прошли большинство шагов модуля 2!
 Чтобы Вам удобнее было ориентироваться по материалу 1-го и 2-го модуля - скачайте файл по ссылке https://stepik.org/media/attachments/course/63054/SQL_1_2.pdf
Через оглавление документа можно быстро перейти к нужному шагу.

Affected rows: 1

Affected rows: 1

Query result:
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 17          | 5      | 1       | 2020-04-12    | 2020-04-13    |
| 18          | 5      | 2       | 2020-04-13    | NULL          |
| 19          | 5      | 3       | NULL          | NULL          |
| 20          | 5      | 4       | NULL          | NULL          |
+-------------+--------+---------+---------------+---------------+


3.1 База данных «Тестирование», запросы на выборку


Вывести студентов, которые сдавали дисциплину «Основы баз данных», указать дату попытки и результат. Информацию вывести по убыванию результатов тестирования.



SELECT name_student, date_attempt, result
FROM subject
INNER JOIN attempt USING (subject_id)
INNER JOIN student USING (student_id)
WHERE subject_id = 2
ORDER BY result DESC;


+-----------------+--------------+--------+
| name_student    | date_attempt | result |
+-----------------+--------------+--------+
| Яковлева Галина | 2020-04-21   | 100    |
| Баранов Павел   | 2020-03-23   | 67     |
| Яковлева Галина | 2020-03-26   | 0      |
+-----------------+--------------+--------+


Вывести, сколько попыток сделали студенты по каждой дисциплине, а также средний результат попыток, который округлить до 2 знаков после запятой. Под результатом попытки понимается процент правильных ответов на вопросы теста, который занесен в столбец result.  В результат включить название дисциплины, а также вычисляемые столбцы Количество и Среднее. Информацию вывести по убыванию средних результатов.


SELECT name_subject, COUNT(date_attempt) AS Количество, ROUND(SUM(result)/COUNT(date_attempt),2) AS Среднее
FROM subject
LEFT JOIN attempt ON subject.subject_id = attempt.subject_id
GROUP BY name_subject
ORDER BY 3 DESC;

+-------------------+------------+---------+
| name_subject      | Количество | Среднее |
+-------------------+------------+---------+
| Основы SQL        | 4          | 58.25   |
| Основы баз данных | 3          | 55.67   |
| Физика            | 0          | NULL    |
+-------------------+------------+---------+



Вывести студентов (различных студентов), имеющих максимальные результаты попыток. Информацию отсортировать в алфавитном порядке по фамилии студента.

Максимальный результат не обязательно будет 100%, поэтому явно это значение в запросе не задавать.


SELECT name_student, result
FROM student
INNER JOIN attempt USING (student_id)
WHERE result = (
          SELECT MAX(result)
          FROM attempt
    )
ORDER BY name_student ASC;


+-----------------+--------+
| name_student    | result |
+-----------------+--------+
| Семенов Иван    | 100    |
| Яковлева Галина | 100    |
+-----------------+--------+


Если студент совершал несколько попыток по одной и той же дисциплине, то вывести разницу в днях между первой и последней попыткой. В результат включить фамилию и имя студента, название дисциплины и вычисляемый столбец Интервал. Информацию вывести по возрастанию разницы. Студентов, сделавших одну попытку по дисциплине, не учитывать. 

SELECT name_student, name_subject, DATEDIFF(MAX(date_attempt),MIN(date_attempt)) AS Интервал
FROM subject
INNER JOIN attempt USING (subject_id)
INNER JOIN studentUSING (student_id )
WHERE COUNT(name_student)>1
GROUP BY Интервал
ORDER BY 3 ASC;

SELECT name_student, name_subject, DATEDIFF(MAX(date_attempt),MIN(date_attempt)) AS Интервал
FROM subject
INNER JOIN attempt USING(subject_id)
INNER JOIN student USING(student_id )
GROUP BY 1,2
HAVING COUNT(name_student)>1 

ORDER BY 3 ASC;

+-----------------+-------------------+----------+
| name_student    | name_subject      | Интервал |
+-----------------+-------------------+----------+
| Яковлева Галина | Основы баз данных | 26       |
| Семенов Иван    | Основы SQL        | 55       |
+-----------------+-------------------+----------+

Студенты могут тестироваться по одной или нескольким дисциплинам (не обязательно по всем). Вывести дисциплину и количество уникальных студентов (столбец назвать Количество), которые по ней проходили тестирование . Информацию отсортировать сначала по убыванию количества, а потом по названию дисциплины. В результат включить и дисциплины, тестирование по которым студенты еще не проходили, в этом случае указать количество студентов 0.

SELECT name_subject, COUNT(DISTINCT(student_id)) AS Количество
FROM subject
LEFT JOIN attempt USING(subject_id)

GROUP BY 1
ORDER BY 2 DESC, 1;

+-------------------+------------+
| name_subject      | Количество |
+-------------------+------------+
| Основы SQL        | 2          |
| Основы баз данных | 2          |
| Физика            | 0          |
+-------------------+------------+


Случайным образом отберите 3 вопроса по дисциплине «Основы баз данных». В результат включите столбцы question_id и name_question

SELECT question_id, name_question
FROM subject
INNER JOIN question ON subject.subject_id=question.subject_id
WHERE name_subject = 'Основы баз данных'
ORDER BY RAND()
LIMIT 3;

+-------------+-----------------------------------------------------+
| question_id | name_question                                       |
+-------------+-----------------------------------------------------+
| 9           | Какой тип данных не допустим в реляционной таблице? |
| 7           | Отношение - это:                                    |
| 6           | База данных - это:                                  |
+-------------+-----------------------------------------------------+

Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине «Основы SQL» 2020-05-17  (значение attempt_id для этой попытки равно 7). Указать, какой ответ дал студент и правильный он или нет (вывести Верно или Неверно). В результат включить вопрос, ответ и вычисляемый столбец  Результат.


SELECT name_question, name_answer, IF(is_correct=1,'Верно','Неверно') AS Результат
FROM question
INNER JOIN testing ON question.question_id = testing.question_id
INNER JOIN answer ON testing.answer_id = answer.answer_id
WHERE attempt_id = 7;

+----------------------------------------------------------+-----------------------+-----------+
| name_question                                            | name_answer           | Результат |
+----------------------------------------------------------+-----------------------+-----------+
| Запрос на выборку начинается с ключевого слова:          | INSERT                | Неверно   |
| Какой запрос выбирает все записи из таблицы student:     | SELECT * FROM student | Верно     |
| Для внутреннего соединения таблиц используется оператор: | CROSS JOIN            | Неверно   |
+----------------------------------------------------------+-----------------------+-----------+


Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до двух знаков после запятой. Вывести фамилию студента, название предмета, дату и результат. Последний столбец назвать Результат. Информацию отсортировать сначала по фамилии студента, потом по убыванию даты попытки.


SELECT 
    name_student, name_subject, date_attempt,
ROUND(SUM(answer.is_correct = 1) / 3 * 100, 2) AS Результат
FROM 
    subject
INNER JOIN 
    attempt USING(subject_id)
INNER JOIN 
    student USING(student_id)
INNER JOIN 
    testing USING(attempt_id)
INNER JOIN 
    answer USING(answer_id)
GROUP BY 
    name_student, name_subject, date_attempt
ORDER BY 
    name_student, date_attempt DESC;


+-----------------+-------------------+--------------+-----------+
| name_student    | name_subject      | date_attempt | Результат |
+-----------------+-------------------+--------------+-----------+
| Баранов Павел   | Основы SQL        | 2020-04-15   | 33.33     |
| Баранов Павел   | Основы баз данных | 2020-03-23   | 66.67     |
| Семенов Иван    | Основы SQL        | 2020-05-17   | 33.33     |
| Семенов Иван    | Основы SQL        | 2020-04-15   | 66.67     |
| Семенов Иван    | Основы SQL        | 2020-03-23   | 100.00    |
| Яковлева Галина | Основы баз данных | 2020-04-21   | 100.00    |
| Яковлева Галина | Основы баз данных | 2020-03-26   | 0.00      |
+-----------------+-------------------+--------------+-----------+

Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос. В результат включить название дисциплины, вопросы по ней (столбец назвать Вопрос), а также два вычисляемых столбца Всего_ответов и Успешность. Информацию отсортировать сначала по названию дисциплины, потом по убыванию успешности, а потом по тексту вопроса в алфавитном порядке.

Поскольку тексты вопросов могут быть длинными, обрезать их 30 символов и добавить многоточие "...".


SELECT name_subject, 
CONCAT(LEFT(name_question,30), '...') AS Вопрос, 
COUNT(testing.question_id) AS Всего_ответов, 
ROUND(SUM(is_correct=1)*100/COUNT(testing.question_id),2) AS Успешность
FROM 
    testing
LEFT JOIN 
    answer USING(answer_id)
LEFT JOIN 
    question ON answer.question_id = question.question_id
LEFT JOIN 
    subject USING(subject_id)
GROUP BY 
    name_subject, Вопрос
ORDER BY 
    name_subject, Успешность DESC, Вопрос;


+-------------------+-----------------------------------+---------------+------------+
| name_subject      | Вопрос                            | Всего_ответов | Успешность |
+-------------------+-----------------------------------+---------------+------------+
| Основы SQL        | Условие, по которому отбираютс... | 1             | 100.00     |
| Основы SQL        | Запрос на выборку начинается с... | 4             | 75.00      |
| Основы SQL        | Какой запрос выбирает все запи... | 3             | 66.67      |
| Основы SQL        | Для сортировки используется:...   | 2             | 50.00      |
| Основы SQL        | Для внутреннего соединения таб... | 2             | 0.00       |
| Основы баз данных | База данных - это:...             | 3             | 66.67      |
| Основы баз данных | Какой тип данных не допустим в... | 2             | 50.00      |
| Основы баз данных | Концептуальная модель использу... | 2             | 50.00      |
| Основы баз данных | Отношение - это:...               | 2             | 50.00      |
+-------------------+-----------------------------------+---------------+------------+



3.2 База данных «Тестирование», запросы корректировки




В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине «Основы баз данных». Установить текущую дату в качестве даты выполнения попытки.


INSERT INTO attempt(student_id, subject_id, date_attempt)
SELECT student_id, subject_id, NOW()
FROM attempt
INNER JOIN student USING(student_id)
INNER JOIN subject USING(subject_id)
WHERE name_student = 'Баранов Павел' AND name_subject = 'Основы баз данных';

SELECT * FROM attempt;


+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 2          | 2023-08-23   | NULL   |
+------------+------------+------------+--------------+--------+


Случайным образом выбрать три вопроса (запрос) по дисциплине, тестирование по которой собирается проходить студент, занесенный в таблицу attempt последним, и добавить их в таблицу testing. id последней попытки получить как максимальное значение id из таблицы attempt.

INSERT INTO testing (attempt_id, question_id)
SELECT 
    (SELECT MAX(attempt_id) FROM attempt), 
   question_id
FROM 
   (SELECT question_id
     FROM question
     WHERE subject_id = (SELECT subject_id FROM attempt ORDER BY attempt_id DESC LIMIT 1)
     ORDER BY RAND()
     LIMIT 3) AS random_questions;

SELECT * FROM testing;
         
+------------+------------+-------------+-----------+
| testing_id | attempt_id | question_id | answer_id |
+------------+------------+-------------+-----------+
| 1          | 1          | 9           | 25        |
| 2          | 1          | 7           | 19        |
| 3          | 1          | 6           | 17        |
| 4          | 2          | 3           | 9         |
| 5          | 2          | 1           | 2         |
| 6          | 2          | 4           | 11        |
| 7          | 3          | 6           | 18        |
| 8          | 3          | 8           | 24        |
| 9          | 3          | 9           | 28        |
| 10         | 4          | 1           | 2         |
| 11         | 4          | 5           | 16        |
| 12         | 4          | 3           | 10        |
| 13         | 5          | 2           | 6         |
| 14         | 5          | 1           | 2         |
| 15         | 5          | 4           | 12        |
| 16         | 6          | 6           | 17        |
| 17         | 6          | 8           | 22        |
| 18         | 6          | 7           | 21        |
| 19         | 7          | 1           | 3         |
| 20         | 7          | 4           | 11        |
| 21         | 7          | 5           | 16        |
| 22         | 8          | 6           | NULL      |
| 23         | 8          | 9           | NULL      |
| 24         | 8          | 8           | NULL      |
+------------+------------+-------------+-----------+


Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки.  Результат попытки вычислить как количество правильных ответов, деленное на 3 (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до целого.

 Будем считать, что мы знаем id попытки,  для которой вычисляется результат, в нашем случае это 8. В таблицу testing занесены следующие ответы пользователя:

+------------+------------+-------------+-----------+
| testing_id | attempt_id | question_id | answer_id |
+------------+------------+-------------+-----------+
| 22         | 8          | 7           | 19        |
| 23         | 8          | 6           | 17        |
| 24         | 8          | 8           | 22        |
+------------+------------+-------------+-----------+

UPDATE attempt 
SET result = (SELECT ROUND(SUM(answer.is_correct) / 3 * 100, 2)
FROM testing
INNER JOIN answer ON testing.answer_id = answer.answer_id
WHERE testing.attempt_id = 8)
WHERE attempt.attempt_id = 8;
        
SELECT * FROM attempt;

+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 2          | 2020-06-12   | 67     |
+------------+------------+------------+--------------+--------+



Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года. Также удалить и все соответствующие этим попыткам вопросы из таблицы testing, которая создавалась следующим запросом:

CREATE TABLE testing (
    testing_id INT PRIMARY KEY AUTO_INCREMENT, 
    attempt_id INT, 
    question_id INT, 
    answer_id INT,
    FOREIGN KEY (attempt_id)  REFERENCES attempt (attempt_id) ON DELETE CASCADE
);




DELETE FROM attempt
WHERE date_attempt <= '2020-05-01';

SELECT * FROM testing;


+------------+------------+-------------+-----------+
| testing_id | attempt_id | question_id | answer_id |
+------------+------------+-------------+-----------+
| 19         | 7          | 1           | 3         |
| 20         | 7          | 4           | 11        |
| 21         | 7          | 5           | 16        |
| 22         | 8          | 7           | 19        |
| 23         | 8          | 6           | 17        |
| 24         | 8          | 8           | 22        |
+------------+------------+-------------+-----------+




3.3 База данных «Абитуриент», запросы на выборку


Вывести абитуриентов, которые хотят поступать на образовательную программу «Мехатроника и робототехника» в отсортированном по фамилиям виде.


SELECT name_enrollee
FROM enrollee
INNER JOIN program_enrollee ON enrollee.enrollee_id = program_enrollee.enrollee_id
INNER JOIN program ON program_enrollee.program_id = program.program_id
WHERE name_program = 'Мехатроника и робототехника'
GROUP BY name_enrollee
ORDER BY name_enrollee;

+-----------------+
| name_enrollee   |
+-----------------+
| Баранов Павел   |
| Попов Илья      |
| Семенов Иван    |
| Степанова Дарья |
+-----------------+


Вывести образовательные программы, на которые для поступления необходим предмет «Информатика». Программы отсортировать в обратном алфавитном порядке.

SELECT name_program
FROM program
INNER JOIN program_subject 
ON program.program_id = program_subject.program_id
INNER JOIN subject 
ON program_subject.subject_id = subject.subject_id
WHERE name_subject ='Информатика'
GROUP BY name_program
ORDER BY name_program DESC;


+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Прикладная математика и информатика |
| Математика и компьютерные науки     |
+-------------------------------------+


Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. Вычисляемые столбцы назвать Количество, Максимум, Минимум, Среднее. Информацию отсортировать по названию предмета в алфавитном порядке, среднее значение округлить до одного знака после запятой.



SELECT name_subject, COUNT(enrollee_subject.subject_id) AS Количество, MAX(result) AS Максимум, MIN(result) AS Минимум, ROUND(AVG(result),1) AS Среднее
FROM enrollee_subject
INNER JOIN subject ON enrollee_subject.subject_id = subject.subject_id
GROUP BY name_subject
ORDER BY name_subject;



+--------------+------------+----------+---------+---------+
| name_subject | Количество | Максимум | Минимум | Среднее |
+--------------+------------+----------+---------+---------+
| Информатика  | 4          | 94       | 75      | 82.0    |
| Математика   | 6          | 92       | 67      | 75.3    |
| Русский язык | 6          | 90       | 65      | 77.5    |
| Физика       | 5          | 90       | 41      | 69.8    |
+--------------+------------+----------+---------+---------+



Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам. Программы вывести в отсортированном по алфавиту виде.

SELECT name_program
FROM program
INNER JOIN program_subject ON program.program_id = program_subject.program_id
GROUP BY name_program
HAVING MIN(min_result) >= 40
ORDER BY name_program;

+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Мехатроника и робототехника         |
| Прикладная математика и информатика |
+-------------------------------------+

Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.


SELECT name_program, plan
FROM program
WHERE plan IN(
SELECT MAX(plan)
    FROM program);

+-----------------------------+------+
| name_program                | plan |
+-----------------------------+------+
| Мехатроника и робототехника | 3    |
+-----------------------------+------+



Посчитать, сколько дополнительных баллов получит каждый абитуриент. Столбец с дополнительными баллами назвать Бонус. Информацию вывести в отсортированном по фамилиям виде.

SELECT name_enrollee, IF(SUM(bonus) IS NOT Null,SUM(bonus),0) AS Бонус
FROM enrollee
LEFT JOIN  enrollee_achievement ON enrollee.enrollee_id = enrollee_achievement.enrollee_id
LEFT JOIN achievement ON enrollee_achievement.achievement_id = achievement.achievement_id
GROUP BY name_enrollee
ORDER BY name_enrollee;


SELECT name_enrollee, IFNULL(SUM(bonus),0) AS Бонус
FROM enrollee
LEFT JOIN  enrollee_achievement ON enrollee.enrollee_id = enrollee_achievement.enrollee_id
LEFT JOIN achievement ON enrollee_achievement.achievement_id = achievement.achievement_id
GROUP BY name_enrollee
ORDER BY name_enrollee;

SELECT name_enrollee, COALESCE(SUM(bonus),0) AS Бонус
FROM enrollee
LEFT JOIN  enrollee_achievement ON enrollee.enrollee_id = enrollee_achievement.enrollee_id
LEFT JOIN achievement ON enrollee_achievement.achievement_id = achievement.achievement_id
GROUP BY name_enrollee
ORDER BY name_enrollee;

+-----------------+-------+
| name_enrollee   | Бонус |
+-----------------+-------+
| Абрамова Катя   | 0     |
| Баранов Павел   | 6     |
| Попов Илья      | 8     |
| Семенов Иван    | 5     |
| Степанова Дарья | 0     |
| Яковлева Галина | 1     |
+-----------------+-------+


Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее (число поданных заявлений деленное на количество мест по плану), округленный до 2-х знаков после запятой. В запросе вывести название факультета, к которому относится образовательная программа, название образовательной программы, план набора абитуриентов на образовательную программу (plan), количество поданных заявлений (Количество) и Конкурс. Информацию отсортировать в порядке убывания конкурса.

SELECT name_department, name_program, plan, COUNT(enrollee_id) AS Количество, ROUND(COUNT(enrollee_id)/plan,2) AS Конкурс
FROM department
INNER JOIN program ON department.department_id = program.department_id
INNER JOIN program_enrollee ON program.program_id = program_enrollee.program_id
GROUP BY name_department, name_program, plan
ORDER BY Конкурс DESC;

+-------------------------+-------------------------------------+------+------------+---------+
| name_department         | name_program                        | plan | Количество | Конкурс |
+-------------------------+-------------------------------------+------+------------+---------+
| Школа естественных наук | Математика и компьютерные науки     | 1    | 3          | 3.00    |
| Инженерная школа        | Прикладная механика                 | 2    | 4          | 2.00    |
| Школа естественных наук | Прикладная математика и информатика | 2    | 3          | 1.50    |
| Инженерная школа        | Мехатроника и робототехника         | 3    | 4          | 1.33    |
+-------------------------+-------------------------------------+------+------------+---------+



Вывести образовательные программы, на которые для поступления необходимы предмет «Информатика» и «Математика» в отсортированном по названию программ виде.

SELECT name_program
FROM program
INNER JOIN program_subject ON program.program_id = program_subject.program_id
INNER JOIN subject ON program_subject.subject_id = subject.subject_id
WHERE name_subject='Математика' OR name_subject='Информатика'
GROUP BY name_program
HAVING COUNT(name_subject)>1


ORDER BY name_program;

+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Математика и компьютерные науки     |
| Прикладная математика и информатика |
+-------------------------------------+


Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. В результат включить название образовательной программы, фамилию и имя абитуриента, а также столбец с суммой баллов, который назвать itog. Информацию вывести в отсортированном сначала по образовательной программе, а потом по убыванию суммы баллов виде.

SELECT name_program, name_enrollee, SUM(result) AS itog
FROM enrollee
INNER JOIN program_enrollee ON enrollee.enrollee_id = program_enrollee.enrollee_id
INNER JOIN program ON program_enrollee.program_id = program.program_id
INNER JOIN program_subject ON program.program_id = program_subject.program_id
INNER JOIN subject ON program_subject.subject_id = subject.subject_id
INNER JOIN enrollee_subject ON subject.subject_id = enrollee_subject.subject_id 
AND enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY name_program, name_enrollee
ORDER BY name_program, itog DESC;

+-------------------------------------+-----------------+------+
| name_program                        | name_enrollee   | itog |
+-------------------------------------+-----------------+------+
| Математика и компьютерные науки     | Степанова Дарья | 276  |
| Математика и компьютерные науки     | Семенов Иван    | 230  |
| Математика и компьютерные науки     | Абрамова Катя   | 226  |
| Мехатроника и робототехника         | Степанова Дарья | 270  |
| Мехатроника и робототехника         | Семенов Иван    | 242  |
| Мехатроника и робототехника         | Попов Илья      | 192  |
| Мехатроника и робототехника         | Баранов Павел   | 179  |
| Прикладная математика и информатика | Семенов Иван    | 230  |
| Прикладная математика и информатика | Абрамова Катя   | 226  |
| Прикладная математика и информатика | Баранов Павел   | 213  |
| Прикладная механика                 | Степанова Дарья | 270  |
| Прикладная механика                 | Яковлева Галина | 238  |
| Прикладная механика                 | Попов Илья      | 192  |
| Прикладная механика                 | Баранов Павел   | 179  |
+-------------------------------------+-----------------+------+

Вывести название образовательной программы и фамилию тех абитуриентов, которые подавали документы на эту образовательную программу, но не могут быть зачислены на нее. Эти абитуриенты имеют результат по одному или нескольким предметам ЕГЭ, необходимым для поступления на эту образовательную программу, меньше минимального балла. Информацию вывести в отсортированном сначала по программам, а потом по фамилиям абитуриентов виде.

Например, Баранов Павел по «Физике» набрал 41 балл, а  для образовательной программы «Прикладная механика» минимальный балл по этому предмету определен в 45 баллов. Следовательно, абитуриент на данную программу не может поступить.

SELECT name_program, name_enrollee
FROM enrollee
INNER JOIN program_enrollee ON enrollee.enrollee_id = program_enrollee.enrollee_id
INNER JOIN program ON program_enrollee.program_id = program.program_id
INNER JOIN program_subject ON program.program_id = program_subject.program_id
INNER JOIN subject ON program_subject.subject_id = subject.subject_id
INNER JOIN enrollee_subject ON subject.subject_id = enrollee_subject.subject_id 
AND enrollee_subject.enrollee_id = enrollee.enrollee_id
WHERE result < min_result
GROUP BY name_program, name_enrollee
ORDER BY name_program, name_enrollee;

+-----------------------------+---------------+
| name_program                | name_enrollee |
+-----------------------------+---------------+
| Мехатроника и робототехника | Баранов Павел |
| Прикладная механика         | Баранов Павел |
+-----------------------------+---------------+

3.4 База данных «Абитуриент», запросы корректировки


Создать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, сумму баллов абитуриентов (столбец itog) в отсортированном сначала по id образовательной программы, а потом по убыванию суммы баллов виде (использовать запрос из предыдущего урока).

CREATE TABLE applicant AS
SELECT program.program_id, enrollee.enrollee_id, SUM(result) AS itog
FROM enrollee
INNER JOIN program_enrollee ON enrollee.enrollee_id = program_enrollee.enrollee_id
INNER JOIN program ON program_enrollee.program_id = program.program_id
INNER JOIN program_subject ON program.program_id = program_subject.program_id
INNER JOIN subject ON program_subject.subject_id = subject.subject_id
INNER JOIN enrollee_subject ON subject.subject_id = enrollee_subject.subject_id 
AND enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY program.program_id, enrollee.enrollee_id
ORDER BY program.program_id, SUM(result) DESC; 

SELECT * FROM applicant;

+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 230  |
| 1          | 2           | 226  |
| 1          | 1           | 213  |
| 2          | 6           | 276  |
| 2          | 3           | 230  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 238  |
| 3          | 5           | 192  |
| 3          | 1           | 179  |
| 4          | 6           | 270  |
| 4          | 3           | 242  |
| 4          | 5           | 192  |
| 4          | 1           | 179  |
+------------+-------------+------+

Из таблицы applicant, созданной на предыдущем шаге, удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету (использовать запрос из предыдущего урока).


DELETE FROM applicant
WHERE (enrollee_id, program_id)IN(SELECT enrollee_subject.enrollee_id, program_subject.program_id
FROM enrollee
INNER JOIN program_enrollee ON enrollee.enrollee_id = program_enrollee.enrollee_id
INNER JOIN program ON program_enrollee.program_id = program.program_id
INNER JOIN program_subject ON program.program_id = program_subject.program_id
INNER JOIN subject ON program_subject.subject_id = subject.subject_id
INNER JOIN enrollee_subject ON subject.subject_id = enrollee_subject.subject_id 
AND enrollee_subject.enrollee_id = enrollee.enrollee_id
 WHERE result < min_result);

SELECT*FROM applicant;


+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 230  |
| 1          | 2           | 226  |
| 1          | 1           | 213  |
| 2          | 6           | 276  |
| 2          | 3           | 230  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 238  |
| 3          | 5           | 192  |
| 4          | 6           | 270  |
| 4          | 3           | 242  |
| 4          | 5           | 192  |
+------------+-------------+------+


Повысить итоговые баллы абитуриентов в таблице applicant на значения дополнительных баллов (использовать запрос из предыдущего урока).


UPDATE 
    applicant
    INNER JOIN (SELECT enrollee.enrollee_id, IF(SUM(bonus) IS NOT Null,SUM(bonus),0) AS Bonus
FROM enrollee
LEFT JOIN  enrollee_achievement ON enrollee.enrollee_id = enrollee_achievement.enrollee_id
LEFT JOIN achievement ON enrollee_achievement.achievement_id = achievement.achievement_id
               GROUP BY enrollee_id) AS bt 
USING(enrollee_id)
SET itog=itog+Bonus;

SELECT*FROM applicant;

+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 235  |
| 1          | 2           | 226  |
| 1          | 1           | 219  |
| 2          | 6           | 276  |
| 2          | 3           | 235  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 239  |
| 3          | 5           | 200  |
| 4          | 6           | 270  |
| 4          | 3           | 247  |
| 4          | 5           | 200  |
+------------+-------------+------+


Поскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной программе могут следовать не в порядке убывания суммарных баллов, необходимо создать новую таблицу applicant_order на основе таблицы applicant. При создании таблицы данные нужно отсортировать сначала по id образовательной программы, потом по убыванию итогового балла. А таблицу applicant, которая была создана как вспомогательная, необходимо удалить.

CREATE TABLE applicant_order AS
SELECT program_id, enrollee_id, itog
FROM applicant
ORDER BY program_id, itog DESC;

DROP TABLE applicant;

SELECT*FROM applicant_order;


+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 235  |
| 1          | 2           | 226  |
| 1          | 1           | 219  |
| 2          | 6           | 276  |
| 2          | 3           | 235  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 239  |
| 3          | 5           | 200  |
| 4          | 6           | 270  |
| 4          | 3           | 247  |
| 4          | 5           | 200  |
+------------+-------------+------+


Включить в таблицу applicant_order новый столбец str_id целого типа , расположить его перед первым.

ALTER TABLE applicant_order ADD str_id INT FIRST;

SELECT*FROM  applicant_order;

+--------+------------+-------------+------+
| str_id | program_id | enrollee_id | itog |
+--------+------------+-------------+------+
| NULL   | 1          | 3           | 235  |
| NULL   | 1          | 2           | 226  |
| NULL   | 1          | 1           | 219  |
| NULL   | 2          | 6           | 276  |
| NULL   | 2          | 3           | 235  |
| NULL   | 2          | 2           | 226  |
| NULL   | 3          | 6           | 270  |
| NULL   | 3          | 4           | 239  |
| NULL   | 3          | 5           | 200  |
| NULL   | 4          | 6           | 270  |
| NULL   | 4          | 3           | 247  |
| NULL   | 4          | 5           | 200  |
+--------+------------+-------------+------+


Занести в столбец str_id таблицы applicant_order нумерацию абитуриентов, которая начинается с 1 для каждой образовательной программы.


UPDATE applicant_order 
JOIN (
    SELECT 
        program_id, 
        enrollee_id, 
        @str_num := IF(@program_id = program_id, @str_num + 1, 1) AS new_str_num,
        @program_id := program_id
    FROM applicant_order
    ORDER BY program_id
) AS ranked
ON applicant_order.program_id = ranked.program_id AND applicant_order.enrollee_id = ranked.enrollee_id
SET applicant_order.str_id = ranked.new_str_num;

SELECT * FROM applicant_order;

+--------+------------+-------------+------+
| str_id | program_id | enrollee_id | itog |
+--------+------------+-------------+------+
| 1      | 1          | 3           | 235  |
| 2      | 1          | 2           | 226  |
| 3      | 1          | 1           | 219  |
| 1      | 2          | 6           | 276  |
| 2      | 2          | 3           | 235  |
| 3      | 2          | 2           | 226  |
| 1      | 3          | 6           | 270  |
| 2      | 3          | 4           | 239  |
| 3      | 3          | 5           | 200  |
| 1      | 4          | 6           | 270  |
| 2      | 4          | 3           | 247  |
| 3      | 4          | 5           | 200  |
+--------+------------+-------------+------+





